parameters:
  AksResourceGroup:
  AppGatewayName:
  AppGatewayResourceGroup:
  Environment:
  KeyVaultName:
  KubernetesCluster:
  KubectlVersion:
  ResourceGroupLocation:
  ServiceConnection:
  SharedSQLServerFQDN:
  SharedSQLServerPassword:
  SharedSQLServerUsername:
  SubscriptionId:

jobs:
- deployment: DeployTo_${{ parameters.Environment }}
  environment: ${{ parameters.Environment }}
  pool:
    name: 'DAS - Continuous Integration'
    ##TO DO: remove demand, using for troubleshooting
    demands: Agent.OS -equals Linux
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          path: 'das-tools-service/'
        - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
          parameters:
            Location: ${{ parameters.ResourceGroupLocation }}
            ParametersPath: $(Pipeline.Workspace)/das-tools-service/azure/template.parameters.json
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SubscriptionId: ${{ parameters.SubscriptionId }}
            TemplatePath: $(Pipeline.Workspace)/das-tools-service/azure/template.json
            IsMultiRepoCheckout: true
        - task: replacetokens@3
          displayName: 'Tokenise manifests'
          inputs:
            rootDirectory: '$(Pipeline.Workspace)/das-tools-service/manifests'
            targetFiles: '**/*.yml'
            encoding: 'auto'
            writeBOM: true
            actionOnMissing: 'fail'
            keepToken: false
            tokenPrefix: '{{'
            tokenSuffix: '}}'
            verbosity: detailed
        - task: SqlAzureDacpacDeployment@1
          displayName: 'Deploy DACPAC'
          inputs:
            azureSubscription: ${{ parameters.ServiceConnection }}
            ServerName: '${{ parameters.SharedSQLServerFQDN }}'
            DatabaseName: '$(DatabaseName)'
            SqlUsername: '${{ parameters.SharedSQLServerUsername }}'
            SqlPassword: '${{ parameters.SharedSQLServerPassword }}'
            DacpacFile: '$(Pipeline.Workspace)/database/src/SFA.DAS.ToolService.Database/bin/Output/SFA.DAS.ToolService.Database.dacpac'
        - task: KubectlInstaller@0
          displayName: 'Install Kubectl ${{ parameters.KubectlVersion }}'
          inputs:
            kubectlVersion: ${{ parameters.KubectlVersion }}
        - template: azure-pipelines-templates/deploy/step/create-kubernetes-namespace.yml@das-platform-building-blocks
          parameters:
            AksResourceGroupName: ${{ parameters.AksResourceGroup }}
            AzureSubscription: ${{ parameters.ServiceConnection }}
            AksClusterName: ${{ parameters.KubernetesCluster }}
            Namespace: engineering
        - template: azure-pipelines-templates/deploy/step/create-kubernetes-ingress.yml@das-platform-building-blocks
          parameters:
            AksClusterName: ${{ parameters.KubernetesCluster }}
            AksResourceGroupName: ${{ parameters.AksResourceGroup }}
            AppGatewayName: ${{ parameters.AppGatewayName }}
            AppGatewayResourceGroup: ${{ parameters.AppGatewayResourceGroup }}
            AzureServiceConnection: ${{ parameters.ServiceConnection }}
            IngressManifestPath: $(Pipeline.Workspace)/das-tools-service/manifests/ingress.yml
            KeyVaultName: ${{ parameters.KeyVaultName }}
            Namespace: engineering
        - task: Kubernetes@1
          displayName: 'Create Shared ConfigMap'
          inputs:
            azureSubscriptionEndpoint: ${{ parameters.ServiceConnection }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            connectionType: Azure Resource Manager
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            namespace: engineering
            command: apply
            useConfigurationFile: true
            configuration: '$(Pipeline.Workspace)/das-tools-service/manifests/shared-config.yml'
            useClusterAdmin: true
        - task: Kubernetes@1
          displayName: 'Create Deployment'
          inputs:
            azureSubscriptionEndpoint: ${{ parameters.ServiceConnection }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            connectionType: Azure Resource Manager
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            namespace: engineering
            command: apply
            useConfigurationFile: true
            configuration: '$(Pipeline.Workspace)/das-tools-service/manifests/deployment.yml'
            useClusterAdmin: true
